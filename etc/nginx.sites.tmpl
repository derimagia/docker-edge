{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
  {{ if .Address }}
    {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
    {{ if and .Container.Node.ID .Address.HostPort }}
    # {{ .Container.Node.Name }}/{{ .Container.Name }}
    server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
    {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
  {{ else if .Network }}
    # {{ .Container.Name }}
    server {{ .Network.IP }}:{{ .Address.Port }};
  {{ end }}
  {{ else if .Network }}
    # {{ .Container.Name }}
    server {{ .Network.IP }} down;
{{ end }}
{{ end }}

server {
  listen 80 default_server;
  server_name _; # This is just an invalid value which will never trigger on a real hostname.
  return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ $sitetype := or (first (groupByKeys $containers "Env.SITE_TYPE")) "drupal" }}
{{ $nginxRoot := or (first (groupByKeys $containers "Env.WEB_ROOT")) "/var/www/html" }}

upstream {{ $host }} {
{{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}

  {{ range $knownNetwork := $CurrentContainer.Networks }}
  {{ range $containerNetwork := $container.Networks }}
  {{ if eq $knownNetwork.Name $containerNetwork.Name }}
    ## Can be connect with "{{ $containerNetwork.Name }}" network
  {{/* If only 1 port exposed, use that */}}
  {{ if eq $addrLen 1 }}

  {{ $address := index $container.Addresses 0 }}
  {{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}

  {{ else }}

  {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
  {{ $address := where $container.Addresses "Port" $port | first }}
  {{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}

  {{ end }}

  {{ end }}
  {{ end }}
  {{ end }}
{{ end }}
}

# Server Info for {{ $host }} (Type "{{ $sitetype }}")
server {
  server_name {{ $host }};

  {{/* For non-proxy sites */}}
  {{ if ne $sitetype "proxy" }}

  root {{ $nginxRoot }};

  {{ end }}

  # Drupal
  {{ if eq $sitetype "drupal" }}

  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  location = /robots.txt {
    log_not_found off;
    access_log off;
  }

  # Media: images, icons, video, audio, HTC
  location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
    expires max;
    access_log off;
    log_not_found off;
    add_header Cache-Control "public";
  }

  location ~* \.(?:css|js)$ {
    access_log off;
    expires 30d;
  }

  # Feed
  location ~* \.(?:rss|atom)$ {
    expires 1h;
    add_header Cache-Control "public";
  }

  # Allow "Well-Known URIs" as per RFC 5785
  location ~* ^/.well-known/ {
    allow all;
  }

  # Remove access to hidden
  location ~ (^|/)\. {
    return 403;
  }

  # Cross domain webfont access
  location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
    expires 1M;
    access_log off;
    log_not_found off;
    add_header Cache-Control "public";
  }

  # Don't allow direct access to PHP files in the vendor directory.
  location ~ /vendor/.*\.php$ {
    deny all;
    return 404;
  }

  location ~ ^/sites/.*/private/ {
    deny all;
    return 404;
  }

  # Fighting with Styles? This little gem is amazing.
  location ~ ^/sites/.*/files/styles/ {
    try_files $uri @rewrite;
  }

  location ~ ^/system/files/ { # For Drupal >= 7
    try_files $uri /index.php?$query_string;
  }

  location / {
    try_files $uri /index.php?$query_string;
  }

  location @rewrite {
    rewrite ^/(.*)$ /index.php?q=$1;
  }

  location ~ '\.php$|^/update.php' {
    fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_pass $host;
    # Don't double log
    access_log  off;
  }

  {{ else if eq $sitetype "proxy" }}

  # Just Proxy
  location / {
    proxy_pass http://{{ trim $host }};

    # Don't double log
    access_log  off;
  }

  {{ end }}
}
{{ end }}
